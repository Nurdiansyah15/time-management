# Database Configuration
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:postgres}
spring.datasource.url=jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:time_energy}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.datasource.driver-class-name=org.postgresql.Driver

# OAuth2 Properties
spring.security.oauth2.client.registration.google.client-id=526758495987-csdtvm8auobu5h00p5avme7rjo32c286.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=email,profile
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google

# Custom OAuth2 settings
app.oauth2.authorizedRedirectUris=http://localhost:8080/oauth2/redirect,http://localhost:5173/oauth2/redirect,http://localhost:3000/oauth2/redirect,http://localhost:8080/swagger-ui/oauth2-redirect.html,http://localhost:8080/swagger-ui/oauth2-redirect.html,http://localhost:8080/login/oauth2/code/google
app.oauth2.redirectUri=http://10.10.103.25:5173/oauth2/redirect

# JWT Configuration
app.jwt.secret=atleast32byteslongsecretneedstobe1234
app.jwt.expirationInMs=360000000
app.jwt.refreshExpirationInMs=86400000

# Logging Configuration
logging.level.root=INFO
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.data.jpa=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.boot.autoconfigure=DEBUG

# Server Configuration
server.port=8080

# CORS Configuration
app.cors.allowed-origins=http://localhost:5173,http://localhost:3000,http://localhost:8080

# Swagger UI OAuth Configuration
springdoc.swagger-ui.oauth.use-pkce-with-authorization-code-grant=true
springdoc.swagger-ui.oauth.use-basic-authentication-with-access-code-grant=true
springdoc.swagger-ui.oauth.client-id=526758495987-csdtvm8auobu5h00p5avme7rjo32c286.apps.googleusercontent.com
springdoc.swagger-ui.oauth.client-secret=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
springdoc.swagger-ui.oauth.scopes=email,profile
springdoc.swagger-ui.oauth2-redirect-url=http://localhost:8080/swagger-ui/oauth2-redirect.html
springdoc.swagger-ui.persistAuthorization=true

# OAuth2 Provider Configuration
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# Lve Reload
spring.devtools.restart.poll-interval=2s
spring.devtools.restart.quiet-period=1s

# cloudinary
cloudinary.api.key=416476111913111
cloudinary.api.secret=eZBrEsFvXJfb-N2rVqWfnczug_w
cloudinary.key.name=amlkhrn


# Redis Configuration
spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.password=${REDIS_PASSWORD:}
spring.cache.type=redis
spring.cache.redis.time-to-live=3600000
spring.cache.redis.cache-null-values=true

# Seeding control
app.db.run-seeders=true

